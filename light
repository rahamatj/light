#! /bin/sh

_upr()
{
    _UPR=
    case $1 in
        a*) _UPR=A ;;        b*) _UPR=B ;;
        c*) _UPR=C ;;        d*) _UPR=D ;;
        e*) _UPR=E ;;        f*) _UPR=F ;;
        g*) _UPR=G ;;        h*) _UPR=H ;;
        i*) _UPR=I ;;        j*) _UPR=J ;;
        k*) _UPR=K ;;        l*) _UPR=L ;;
        m*) _UPR=M ;;        n*) _UPR=N ;;
        o*) _UPR=O ;;        p*) _UPR=P ;;
        q*) _UPR=Q ;;        r*) _UPR=R ;;
        s*) _UPR=S ;;        t*) _UPR=T ;;
        u*) _UPR=U ;;        v*) _UPR=V ;;
        w*) _UPR=W ;;        x*) _UPR=X ;;
        y*) _UPR=Y ;;        z*) _UPR=Z ;;
         *) _UPR=${1%${1#?}} ;;
    esac
}

_cap()
{
  _upr "$1"
  _CAP=$_UPR${1#?}
}

_capwords()
{
  unset _CAPWORDS
  set -f
  for word in $*
  do
    _cap "$word"
    _CAPWORDS="$_CAPWORDS${_CAPWORDS:+ }$_CAP"
  done
}

echo ""
echo "-- ----------- --"
echo "-- LIGHTING UP --"
echo "-- ----------- --"

if [ $# -eq 0 ]
    then
        project_name=${PWD##*/}
    else
        project_name=$1
	echo ""
        echo "-- Creating new laravel project: $project_name --"
        echo ""
        composer create-project --prefer-dist laravel/laravel $project_name
        cd $project_name
fi

if [ ! -d vendor ]
    then
	echo ""
        echo "-- Running 'composer install' --"
        echo ""
        composer install
fi

if [ ! -d vendor/laravel/homestead ]
    then
        echo "-- Requiring Homestead --"
        echo ""
        composer require laravel/homestead --dev
fi

project_url=$project_name.lcl.net
pma_url=$project_name.pma.net

database_name=${project_name//-/_}

app_name=${project_name//-/ }
_capwords $app_name
app_name=$_CAPWORDS

echo ""
read -e -p 'Vagrant Box IP: ' -i '192.168.10.10' ip
read -e -p 'Vagrant Box Memory: ' -i '512' memory
read -e -p 'Vagrant Box CPUs: ' -i '1' cpus
echo ""

echo "-- Creating Homestead.yaml --"

cat > Homestead.yaml <<EOF
ip: $ip
memory: $memory
cpus: $cpus
provider: virtualbox
authorize: ~/.ssh/id_rsa.pub
keys:
    - ~/.ssh/id_rsa
folders:
    -
        map: $(pwd)
        to: /home/vagrant/code
sites:
    -
        map: $project_url
        to: /home/vagrant/code/public
    -
        map: $pma_url
        to: /home/vagrant/phpmyadmin
databases:
    - $database_name
name: $project_name
hostname: $project_name
EOF

echo "-- Creating Vagrantfile --"

cat > Vagrantfile <<EOF
# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'json'
require 'yaml'

VAGRANTFILE_API_VERSION ||= "2"
confDir = \$confDir ||= File.expand_path("vendor/laravel/homestead", File.dirname(__FILE__))

homesteadYamlPath = File.expand_path("Homestead.yaml", File.dirname(__FILE__))
homesteadJsonPath = File.expand_path("Homestead.json", File.dirname(__FILE__))
afterScriptPath = "after.sh"
customizationScriptPath = "user-customizations.sh"
aliasesPath = "aliases"

require File.expand_path(confDir + '/scripts/homestead.rb')

Vagrant.require_version '>= 1.9.0'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    if File.exist? aliasesPath then
        config.vm.provision "file", source: aliasesPath, destination: "/tmp/bash_aliases"
        config.vm.provision "shell" do |s|
            s.inline = "awk '{ sub(\"\r$\", \"\"); print }' /tmp/bash_aliases > /home/vagrant/.bash_aliases"
        end
    end

    config.vm.provider "virtualbox" do |vb|
        vb.gui = true
    end

    config.vm.boot_timeout = 600

    if File.exist? homesteadYamlPath then
        settings = YAML::load(File.read(homesteadYamlPath))
    elsif File.exist? homesteadJsonPath then
        settings = JSON::parse(File.read(homesteadJsonPath))
    else
        abort "Homestead settings file not found in " + File.dirname(__FILE__)
    end

    Homestead.configure(config, settings)

    if File.exist? afterScriptPath then
        config.vm.provision "shell", path: afterScriptPath, privileged: false, keep_color: true
    end

    if File.exist? customizationScriptPath then
        config.vm.provision "shell", path: customizationScriptPath, privileged: false, keep_color: true
    end

    if defined? VagrantPlugins::HostsUpdater
        config.hostsupdater.aliases = settings['sites'].map { |site| site['map'] }
    end
end
EOF

echo "-- Creating after.sh --"

cat > after.sh <<EOF
#!/bin/sh

curl -sS https://raw.githubusercontent.com/rahamatjahan/pma/master/pma.sh | sh
EOF

echo "-- Changing .env APP_NAME to '$app_name' --"
sed -i "s/\(APP_NAME *= *\).*/\1\"$app_name\"/" .env

echo "-- Changing .env APP_URL to 'http://$project_url' --"
sed -i "s/\(APP_URL *= *\).*/\1http:\/\/$project_url/" .env

echo "-- Changing .env DB_DATABASE to '$database_name' --"
sed -i "s/\(DB_DATABASE *= *\).*/\1$database_name/" .env

echo "-- Adding project domains in '/etc/hosts' file --"
echo ""

if ! grep -q "$ip $project_url" /etc/hosts
    then
        sudo -- sh -c -e "echo '' >> /etc/hosts"
        sudo -- sh -c -e "echo '$ip $project_url' >> /etc/hosts"
fi

if ! grep -q "$ip $pma_url" /etc/hosts
    then
        sudo -- sh -c -e "echo '$ip $pma_url' >> /etc/hosts"
fi

echo ""
echo "-- --- --"
echo "-- LIT --"
echo "-- --- --"
echo ""

echo "Vagrant Box IP: "$ip
echo "Vagrant Box Memory: "$memory
echo "Vagrant Box CPUs: "$cpus
echo "Vagrant Box name: "$project_name
echo "Vagrant Box hostname: "$project_name
echo ""

echo "Project name: "$project_name
echo "Project database: "$database_name
echo "Project URL: http://"$project_url
echo "PHPMyAdmin URL: http://"$pma_url
echo ""

echo "Run 'vagarnt up' from inside '$project_name' directory to get your box up and running"
